// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FlashLoanFeePercentageChanged extends ethereum.Event {
  get params(): FlashLoanFeePercentageChanged__Params {
    return new FlashLoanFeePercentageChanged__Params(this);
  }
}

export class FlashLoanFeePercentageChanged__Params {
  _event: FlashLoanFeePercentageChanged;

  constructor(event: FlashLoanFeePercentageChanged) {
    this._event = event;
  }

  get newFlashLoanFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SwapFeePercentageChanged extends ethereum.Event {
  get params(): SwapFeePercentageChanged__Params {
    return new SwapFeePercentageChanged__Params(this);
  }
}

export class SwapFeePercentageChanged__Params {
  _event: SwapFeePercentageChanged;

  constructor(event: SwapFeePercentageChanged) {
    this._event = event;
  }

  get newSwapFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProtocolFeeCollector extends ethereum.SmartContract {
  static bind(address: Address): ProtocolFeeCollector {
    return new ProtocolFeeCollector("ProtocolFeeCollector", address);
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector),
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectedFeeAmounts(tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getCollectedFeeAmounts",
      "getCollectedFeeAmounts(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens)],
    );

    return result[0].toBigIntArray();
  }

  try_getCollectedFeeAmounts(
    tokens: Array<Address>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getCollectedFeeAmounts",
      "getCollectedFeeAmounts(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFlashLoanFeePercentage(): BigInt {
    let result = super.call(
      "getFlashLoanFeePercentage",
      "getFlashLoanFeePercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getFlashLoanFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFlashLoanFeePercentage",
      "getFlashLoanFeePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapFeePercentage(): BigInt {
    let result = super.call(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getSwapFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetFlashLoanFeePercentageCall extends ethereum.Call {
  get inputs(): SetFlashLoanFeePercentageCall__Inputs {
    return new SetFlashLoanFeePercentageCall__Inputs(this);
  }

  get outputs(): SetFlashLoanFeePercentageCall__Outputs {
    return new SetFlashLoanFeePercentageCall__Outputs(this);
  }
}

export class SetFlashLoanFeePercentageCall__Inputs {
  _call: SetFlashLoanFeePercentageCall;

  constructor(call: SetFlashLoanFeePercentageCall) {
    this._call = call;
  }

  get newFlashLoanFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFlashLoanFeePercentageCall__Outputs {
  _call: SetFlashLoanFeePercentageCall;

  constructor(call: SetFlashLoanFeePercentageCall) {
    this._call = call;
  }
}

export class SetSwapFeePercentageCall extends ethereum.Call {
  get inputs(): SetSwapFeePercentageCall__Inputs {
    return new SetSwapFeePercentageCall__Inputs(this);
  }

  get outputs(): SetSwapFeePercentageCall__Outputs {
    return new SetSwapFeePercentageCall__Outputs(this);
  }
}

export class SetSwapFeePercentageCall__Inputs {
  _call: SetSwapFeePercentageCall;

  constructor(call: SetSwapFeePercentageCall) {
    this._call = call;
  }

  get newSwapFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeePercentageCall__Outputs {
  _call: SetSwapFeePercentageCall;

  constructor(call: SetSwapFeePercentageCall) {
    this._call = call;
  }
}

export class WithdrawCollectedFeesCall extends ethereum.Call {
  get inputs(): WithdrawCollectedFeesCall__Inputs {
    return new WithdrawCollectedFeesCall__Inputs(this);
  }

  get outputs(): WithdrawCollectedFeesCall__Outputs {
    return new WithdrawCollectedFeesCall__Outputs(this);
  }
}

export class WithdrawCollectedFeesCall__Inputs {
  _call: WithdrawCollectedFeesCall;

  constructor(call: WithdrawCollectedFeesCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCollectedFeesCall__Outputs {
  _call: WithdrawCollectedFeesCall;

  constructor(call: WithdrawCollectedFeesCall) {
    this._call = call;
  }
}
