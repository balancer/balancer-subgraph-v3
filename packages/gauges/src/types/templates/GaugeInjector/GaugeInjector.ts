// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC20Swept extends ethereum.Event {
  get params(): ERC20Swept__Params {
    return new ERC20Swept__Params(this);
  }
}

export class ERC20Swept__Params {
  _event: ERC20Swept;

  constructor(event: ERC20Swept) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmissionsInjection extends ethereum.Event {
  get params(): EmissionsInjection__Params {
    return new EmissionsInjection__Params(this);
  }
}

export class EmissionsInjection__Params {
  _event: EmissionsInjection;

  constructor(event: EmissionsInjection) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GasTokenWithdrawn extends ethereum.Event {
  get params(): GasTokenWithdrawn__Params {
    return new GasTokenWithdrawn__Params(this);
  }
}

export class GasTokenWithdrawn__Params {
  _event: GasTokenWithdrawn;

  constructor(event: GasTokenWithdrawn) {
    this._event = event;
  }

  get amountWithdrawn(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class KeeperRegistryAddressUpdated extends ethereum.Event {
  get params(): KeeperRegistryAddressUpdated__Params {
    return new KeeperRegistryAddressUpdated__Params(this);
  }
}

export class KeeperRegistryAddressUpdated__Params {
  _event: KeeperRegistryAddressUpdated;

  constructor(event: KeeperRegistryAddressUpdated) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MinWaitPeriodUpdated extends ethereum.Event {
  get params(): MinWaitPeriodUpdated__Params {
    return new MinWaitPeriodUpdated__Params(this);
  }
}

export class MinWaitPeriodUpdated__Params {
  _event: MinWaitPeriodUpdated;

  constructor(event: MinWaitPeriodUpdated) {
    this._event = event;
  }

  get oldMinWaitPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMinWaitPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PerformedUpkeep extends ethereum.Event {
  get params(): PerformedUpkeep__Params {
    return new PerformedUpkeep__Params(this);
  }
}

export class PerformedUpkeep__Params {
  _event: PerformedUpkeep;

  constructor(event: PerformedUpkeep) {
    this._event = event;
  }

  get needsFunding(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class SetHandlingToken extends ethereum.Event {
  get params(): SetHandlingToken__Params {
    return new SetHandlingToken__Params(this);
  }
}

export class SetHandlingToken__Params {
  _event: SetHandlingToken;

  constructor(event: SetHandlingToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GaugeInjector__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class GaugeInjector__getAccountInfoResult {
  value0: BigInt;
  value1: boolean;
  value2: i32;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: i32,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getAmountPerPeriod(): BigInt {
    return this.value0;
  }

  getIsActive(): boolean {
    return this.value1;
  }

  getMaxPeriods(): i32 {
    return this.value2;
  }

  getPeriodNumber(): i32 {
    return this.value3;
  }

  getLastInjectionTimeStamp(): BigInt {
    return this.value4;
  }
}

export class GaugeInjector extends ethereum.SmartContract {
  static bind(address: Address): GaugeInjector {
    return new GaugeInjector("GaugeInjector", address);
  }

  checkSufficientBalances(): boolean {
    let result = super.call(
      "checkSufficientBalances",
      "checkSufficientBalances():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_checkSufficientBalances(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkSufficientBalances",
      "checkSufficientBalances():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkUpkeep(param0: Bytes): GaugeInjector__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new GaugeInjector__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<GaugeInjector__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GaugeInjector__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  getAccountInfo(targetAddress: Address): GaugeInjector__getAccountInfoResult {
    let result = super.call(
      "getAccountInfo",
      "getAccountInfo(address):(uint256,bool,uint8,uint8,uint56)",
      [ethereum.Value.fromAddress(targetAddress)]
    );

    return new GaugeInjector__getAccountInfoResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_getAccountInfo(
    targetAddress: Address
  ): ethereum.CallResult<GaugeInjector__getAccountInfoResult> {
    let result = super.tryCall(
      "getAccountInfo",
      "getAccountInfo(address):(uint256,bool,uint8,uint8,uint56)",
      [ethereum.Value.fromAddress(targetAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GaugeInjector__getAccountInfoResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  getInjectTokenAddress(): Address {
    let result = super.call(
      "getInjectTokenAddress",
      "getInjectTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getInjectTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getInjectTokenAddress",
      "getInjectTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getKeeperRegistryAddress(): Address {
    let result = super.call(
      "getKeeperRegistryAddress",
      "getKeeperRegistryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getKeeperRegistryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getKeeperRegistryAddress",
      "getKeeperRegistryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMinWaitPeriodSeconds(): BigInt {
    let result = super.call(
      "getMinWaitPeriodSeconds",
      "getMinWaitPeriodSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinWaitPeriodSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinWaitPeriodSeconds",
      "getMinWaitPeriodSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReadyGauges(): Array<Address> {
    let result = super.call(
      "getReadyGauges",
      "getReadyGauges():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getReadyGauges(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getReadyGauges",
      "getReadyGauges():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWatchList(): Array<Address> {
    let result = super.call("getWatchList", "getWatchList():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getWatchList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWatchList",
      "getWatchList():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get keeperRegistryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minWaitPeriodSeconds(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get injectTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class InjectFundsCall extends ethereum.Call {
  get inputs(): InjectFundsCall__Inputs {
    return new InjectFundsCall__Inputs(this);
  }

  get outputs(): InjectFundsCall__Outputs {
    return new InjectFundsCall__Outputs(this);
  }
}

export class InjectFundsCall__Inputs {
  _call: InjectFundsCall;

  constructor(call: InjectFundsCall) {
    this._call = call;
  }

  get gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class InjectFundsCall__Outputs {
  _call: InjectFundsCall;

  constructor(call: InjectFundsCall) {
    this._call = call;
  }
}

export class ManualDepositCall extends ethereum.Call {
  get inputs(): ManualDepositCall__Inputs {
    return new ManualDepositCall__Inputs(this);
  }

  get outputs(): ManualDepositCall__Outputs {
    return new ManualDepositCall__Outputs(this);
  }
}

export class ManualDepositCall__Inputs {
  _call: ManualDepositCall;

  constructor(call: ManualDepositCall) {
    this._call = call;
  }

  get gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reward_token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ManualDepositCall__Outputs {
  _call: ManualDepositCall;

  constructor(call: ManualDepositCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class SetDistributorToOwnerCall extends ethereum.Call {
  get inputs(): SetDistributorToOwnerCall__Inputs {
    return new SetDistributorToOwnerCall__Inputs(this);
  }

  get outputs(): SetDistributorToOwnerCall__Outputs {
    return new SetDistributorToOwnerCall__Outputs(this);
  }
}

export class SetDistributorToOwnerCall__Inputs {
  _call: SetDistributorToOwnerCall;

  constructor(call: SetDistributorToOwnerCall) {
    this._call = call;
  }

  get gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reward_token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDistributorToOwnerCall__Outputs {
  _call: SetDistributorToOwnerCall;

  constructor(call: SetDistributorToOwnerCall) {
    this._call = call;
  }
}

export class SetInjectTokenAddressCall extends ethereum.Call {
  get inputs(): SetInjectTokenAddressCall__Inputs {
    return new SetInjectTokenAddressCall__Inputs(this);
  }

  get outputs(): SetInjectTokenAddressCall__Outputs {
    return new SetInjectTokenAddressCall__Outputs(this);
  }
}

export class SetInjectTokenAddressCall__Inputs {
  _call: SetInjectTokenAddressCall;

  constructor(call: SetInjectTokenAddressCall) {
    this._call = call;
  }

  get ERC20token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInjectTokenAddressCall__Outputs {
  _call: SetInjectTokenAddressCall;

  constructor(call: SetInjectTokenAddressCall) {
    this._call = call;
  }
}

export class SetKeeperRegistryAddressCall extends ethereum.Call {
  get inputs(): SetKeeperRegistryAddressCall__Inputs {
    return new SetKeeperRegistryAddressCall__Inputs(this);
  }

  get outputs(): SetKeeperRegistryAddressCall__Outputs {
    return new SetKeeperRegistryAddressCall__Outputs(this);
  }
}

export class SetKeeperRegistryAddressCall__Inputs {
  _call: SetKeeperRegistryAddressCall;

  constructor(call: SetKeeperRegistryAddressCall) {
    this._call = call;
  }

  get keeperRegistryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKeeperRegistryAddressCall__Outputs {
  _call: SetKeeperRegistryAddressCall;

  constructor(call: SetKeeperRegistryAddressCall) {
    this._call = call;
  }
}

export class SetMinWaitPeriodSecondsCall extends ethereum.Call {
  get inputs(): SetMinWaitPeriodSecondsCall__Inputs {
    return new SetMinWaitPeriodSecondsCall__Inputs(this);
  }

  get outputs(): SetMinWaitPeriodSecondsCall__Outputs {
    return new SetMinWaitPeriodSecondsCall__Outputs(this);
  }
}

export class SetMinWaitPeriodSecondsCall__Inputs {
  _call: SetMinWaitPeriodSecondsCall;

  constructor(call: SetMinWaitPeriodSecondsCall) {
    this._call = call;
  }

  get period(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinWaitPeriodSecondsCall__Outputs {
  _call: SetMinWaitPeriodSecondsCall;

  constructor(call: SetMinWaitPeriodSecondsCall) {
    this._call = call;
  }
}

export class SetRecipientListCall extends ethereum.Call {
  get inputs(): SetRecipientListCall__Inputs {
    return new SetRecipientListCall__Inputs(this);
  }

  get outputs(): SetRecipientListCall__Outputs {
    return new SetRecipientListCall__Outputs(this);
  }
}

export class SetRecipientListCall__Inputs {
  _call: SetRecipientListCall;

  constructor(call: SetRecipientListCall) {
    this._call = call;
  }

  get gaugeAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amountsPerPeriod(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get maxPeriods(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class SetRecipientListCall__Outputs {
  _call: SetRecipientListCall;

  constructor(call: SetRecipientListCall) {
    this._call = call;
  }
}

export class SetValidatedRecipientListCall extends ethereum.Call {
  get inputs(): SetValidatedRecipientListCall__Inputs {
    return new SetValidatedRecipientListCall__Inputs(this);
  }

  get outputs(): SetValidatedRecipientListCall__Outputs {
    return new SetValidatedRecipientListCall__Outputs(this);
  }
}

export class SetValidatedRecipientListCall__Inputs {
  _call: SetValidatedRecipientListCall;

  constructor(call: SetValidatedRecipientListCall) {
    this._call = call;
  }

  get gaugeAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amountsPerPeriod(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get maxPeriods(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class SetValidatedRecipientListCall__Outputs {
  _call: SetValidatedRecipientListCall;

  constructor(call: SetValidatedRecipientListCall) {
    this._call = call;
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawGasTokenCall extends ethereum.Call {
  get inputs(): WithdrawGasTokenCall__Inputs {
    return new WithdrawGasTokenCall__Inputs(this);
  }

  get outputs(): WithdrawGasTokenCall__Outputs {
    return new WithdrawGasTokenCall__Outputs(this);
  }
}

export class WithdrawGasTokenCall__Inputs {
  _call: WithdrawGasTokenCall;

  constructor(call: WithdrawGasTokenCall) {
    this._call = call;
  }
}

export class WithdrawGasTokenCall__Outputs {
  _call: WithdrawGasTokenCall;

  constructor(call: WithdrawGasTokenCall) {
    this._call = call;
  }
}
