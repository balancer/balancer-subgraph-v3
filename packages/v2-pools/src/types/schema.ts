// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Factory must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Factory", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Factory | null {
    return changetype<Factory | null>(
      store.get_in_block("Factory", id.toHexString()),
    );
  }

  static load(id: Bytes): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get pools(): PoolLoader {
    return new PoolLoader(
      "Factory",
      this.get("id")!.toBytes().toHexString(),
      "pools",
    );
  }
}

export class WeightedParams extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeightedParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WeightedParams must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("WeightedParams", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): WeightedParams | null {
    return changetype<WeightedParams | null>(
      store.get_in_block("WeightedParams", id.toHexString()),
    );
  }

  static load(id: Bytes): WeightedParams | null {
    return changetype<WeightedParams | null>(
      store.get("WeightedParams", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get weights(): Array<BigDecimal> {
    let value = this.get("weights");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set weights(value: Array<BigDecimal>) {
    this.set("weights", Value.fromBigDecimalArray(value));
  }
}

export class StableParams extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StableParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type StableParams must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StableParams", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): StableParams | null {
    return changetype<StableParams | null>(
      store.get_in_block("StableParams", id.toHexString()),
    );
  }

  static load(id: Bytes): StableParams | null {
    return changetype<StableParams | null>(
      store.get("StableParams", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amp(): BigInt {
    let value = this.get("amp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amp(value: BigInt) {
    this.set("amp", Value.fromBigInt(value));
  }
}

export class GyroEParams extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GyroEParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GyroEParams must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GyroEParams", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GyroEParams | null {
    return changetype<GyroEParams | null>(
      store.get_in_block("GyroEParams", id.toHexString()),
    );
  }

  static load(id: Bytes): GyroEParams | null {
    return changetype<GyroEParams | null>(
      store.get("GyroEParams", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get alpha(): BigDecimal | null {
    let value = this.get("alpha");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set alpha(value: BigDecimal | null) {
    if (!value) {
      this.unset("alpha");
    } else {
      this.set("alpha", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get beta(): BigDecimal | null {
    let value = this.get("beta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set beta(value: BigDecimal | null) {
    if (!value) {
      this.unset("beta");
    } else {
      this.set("beta", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lambda(): BigDecimal | null {
    let value = this.get("lambda");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lambda(value: BigDecimal | null) {
    if (!value) {
      this.unset("lambda");
    } else {
      this.set("lambda", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get c(): BigDecimal | null {
    let value = this.get("c");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set c(value: BigDecimal | null) {
    if (!value) {
      this.unset("c");
    } else {
      this.set("c", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get s(): BigDecimal | null {
    let value = this.get("s");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set s(value: BigDecimal | null) {
    if (!value) {
      this.unset("s");
    } else {
      this.set("s", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauAlphaX(): BigDecimal | null {
    let value = this.get("tauAlphaX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauAlphaX(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauAlphaX");
    } else {
      this.set("tauAlphaX", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauAlphaY(): BigDecimal | null {
    let value = this.get("tauAlphaY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauAlphaY(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauAlphaY");
    } else {
      this.set("tauAlphaY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauBetaX(): BigDecimal | null {
    let value = this.get("tauBetaX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauBetaX(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauBetaX");
    } else {
      this.set("tauBetaX", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauBetaY(): BigDecimal | null {
    let value = this.get("tauBetaY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauBetaY(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauBetaY");
    } else {
      this.set("tauBetaY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get u(): BigDecimal | null {
    let value = this.get("u");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set u(value: BigDecimal | null) {
    if (!value) {
      this.unset("u");
    } else {
      this.set("u", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get v(): BigDecimal | null {
    let value = this.get("v");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set v(value: BigDecimal | null) {
    if (!value) {
      this.unset("v");
    } else {
      this.set("v", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get w(): BigDecimal | null {
    let value = this.get("w");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set w(value: BigDecimal | null) {
    if (!value) {
      this.unset("w");
    } else {
      this.set("w", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get z(): BigDecimal | null {
    let value = this.get("z");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set z(value: BigDecimal | null) {
    if (!value) {
      this.unset("z");
    } else {
      this.set("z", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get dSq(): BigDecimal | null {
    let value = this.get("dSq");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set dSq(value: BigDecimal | null) {
    if (!value) {
      this.unset("dSq");
    } else {
      this.set("dSq", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Pool extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Pool must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pool", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Pool | null {
    return changetype<Pool | null>(
      store.get_in_block("Pool", id.toHexString()),
    );
  }

  static load(id: Bytes): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get factory(): Bytes {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get weightedParams(): Bytes | null {
    let value = this.get("weightedParams");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set weightedParams(value: Bytes | null) {
    if (!value) {
      this.unset("weightedParams");
    } else {
      this.set("weightedParams", Value.fromBytes(<Bytes>value));
    }
  }

  get stableParams(): Bytes | null {
    let value = this.get("stableParams");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set stableParams(value: Bytes | null) {
    if (!value) {
      this.unset("stableParams");
    } else {
      this.set("stableParams", Value.fromBytes(<Bytes>value));
    }
  }

  get gyroEParams(): Bytes | null {
    let value = this.get("gyroEParams");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set gyroEParams(value: Bytes | null) {
    if (!value) {
      this.unset("gyroEParams");
    } else {
      this.set("gyroEParams", Value.fromBytes(<Bytes>value));
    }
  }
}

export class PoolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Pool[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Pool[]>(value);
  }
}
